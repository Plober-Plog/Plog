pipeline {
    agent any

    environment {
        TARGET_BRANCH = 'develop-be'  // 목표 브랜치 이름 설정
    }

    stages {
        stage('Cleanup Workspace') {
            steps {
                deleteDir() // 작업 공간 초기화
            }
        }
        stage('Checkout') {
            steps {
                script {
                    checkout([$class: 'GitSCM', 
                              branches: [[name: '*/develop-be']],
                              doGenerateSubmoduleConfigurations: false,
                              extensions: [[$class: 'CleanCheckout']],
                              userRemoteConfigs: [[url: 'https://lab.ssafy.com/s11-webmobile2-sub2/S11P12B308.git',
                              credentialsId: 'gitlab-token']]  // credentialsId를 올바르게 설정
                    ])
                }
            }
        }
        stage('Build with Gradle') {
            steps {
                dir('backend-realtime') {
                    sh 'chmod +x ./gradlew'  // 실행 권한 추가
                    sh './gradlew clean build --no-daemon'
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    // JAR 파일을 이용하여 Docker 이미지 빌드
                    sh 'docker build -t backend-realtime:latest -f backend-realtime/Dockerfile backend-realtime/.'
                }
            }
        }
        stage('Deploy with Docker Compose') {
            steps {
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-ssh-key-id', keyFileVariable: 'SSH_KEY_FILE', usernameVariable: 'SSH_USER')]) {
                        sh '''
                            ssh -o StrictHostKeyChecking=no -i $SSH_KEY_FILE $SSH_USER@your-host-ip "
                            cd /home/ubuntu/plog &&
                            docker-compose down &&
                            docker-compose up -d"
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            junit '**/backend-realtime/build/test-results/test/*.xml'
            archiveArtifacts artifacts: '**/backend-realtime/build/libs/*.jar', fingerprint: true
        }
        success {
            echo 'Deployment successful!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}
